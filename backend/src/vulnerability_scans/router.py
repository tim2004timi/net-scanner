from typing import List

from fastapi import APIRouter, HTTPException
from fastapi.params import Depends
from fastapi.security import HTTPBearer
from sqlalchemy.ext.asyncio import AsyncSession

from ..assets.service import get_asset_by_id
from ..database import db_manager, redis_client
from . import service
from ..auth.dependencies import get_current_active_auth_user
from ..dependencies import check_permission, Permission
from ..users.schemas import User
from .schemas import (
    VulnerabilityScan,
    VulnerabilityScanList,
    VulnerabilityScanCreate,
    ScanStatusEnum,
)

http_bearer = HTTPBearer(auto_error=False)
router = APIRouter(
    tags=["Vulnerability Scans"],
    prefix="/vulnerability-scans",
    dependencies=[
        Depends(http_bearer),
        # Depends(check_permission(Permission.USER)),
    ],
)


@router.get(
    path="/",
    response_model=VulnerabilityScanList,
    summary="Get vulnerability scans for current user",
)
async def get_vulnerability_scans_by_user(
    session: AsyncSession = Depends(db_manager.session_dependency),
    user: User = Depends(get_current_active_auth_user),
    page_size: int = 10,
    page_number: int = 1,
    search: str | None = None,
    status: ScanStatusEnum | None = None,
):
    """
    Gets vulnerability scans list for current authenticated user

    - **access_token**: Header bearer access token (required)
    """
    return await service.get_vulnerability_scans_by_user(
        session=session,
        user=user,
        page_size=page_size,
        page_number=page_number,
        status_filter=status,
        search=search,
    )


@router.post(
    path="/",
    response_model=VulnerabilityScan,
    summary="Create vulnerability scan for current user",
)
async def create_vulnerability_scan(
    asset_id: int,
    vulnerability_scan_create: VulnerabilityScanCreate,
    session: AsyncSession = Depends(db_manager.session_dependency),
    user: User = Depends(get_current_active_auth_user),
):
    """
    Creates an vulnerability scan for current authenticated user and run hosts scan.

    - **access_token**: Header bearer access token (required)

    - **name**: Name of the asset (required, unique)
    - **type**: Type of the asset (default="Внешний", values: "Внешний", "Внутренний")
    - **targets**: List of asset targets (required, e.g. 10.0.0.1, 10.0.0.1/24, domain.ru)
    - **frequency**: Frequency of scanning (default="Один раз", values: "Один раз", "Ежедневно", "Еженедельно", "Ежемесячно")
    - **tg_alerts**: Confirm alerts to telegram (default=false)
    """
    asset = await get_asset_by_id(session=session, user=user, asset_id=asset_id)
    return await service.create_vulnerability_scan(
        session=session,
        user=user,
        vulnerability_scan_create=vulnerability_scan_create,
        asset=asset,
    )


@router.delete(
    path="/{vulnerability_scan_id}/",
    response_model=VulnerabilityScan,
    summary="Delete vulnerability scan for current user",
)
async def delete_vulnerability_scan(
    vulnerability_scan_id: int,
    session: AsyncSession = Depends(db_manager.session_dependency),
    user: User = Depends(get_current_active_auth_user),
):
    """
    Deletes a vulnerability scan for current authenticated user

    - **access_token**: Header bearer access token (required)
    """
    vulnerability_scan = await service.get_vulnerability_scan_by_id(
        session=session, user=user, vulnerability_scan_id=vulnerability_scan_id
    )
    return await service.delete_vulnerability_scan(
        session=session,
        vulnerability_scan=vulnerability_scan,
    )
