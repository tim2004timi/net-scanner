import re
from datetime import datetime, timedelta
from typing import List, Optional
from enum import Enum
from pydantic import (
    BaseModel,
    field_validator,
    ConfigDict,
    Field,
)
import ipaddress


class ScanStatusEnum(str, Enum):
    DONE = "Готово"
    IN_PROCESS = "В процессе"
    FAILED = "Провалено"


class CVEStatusEnum(str, Enum):
    CORRECTED = "Исправлен"
    ACTIVE = "Активен"
    NOT_FOUND = "Не найден"
    NOT_CONFIRMED = "Не подтвержден"
    GOT = "Получен"


class VulnerabilityScanBase(BaseModel):
    pass


class VulnerabilityScanCreate(VulnerabilityScanBase):
    pass


class VulnerabilityScan(VulnerabilityScanBase):
    id: int
    asset_name: str
    status: ScanStatusEnum
    created_at: datetime
    start_host_scan_at: datetime | None
    end_host_scan_at: datetime | None
    duration: str | None = Field(None, example="1 м.")
    threat_level: str | None = None

    @field_validator("duration", mode="before")
    def calculate_duration(cls, _, values) -> str | None:
        start = values.get("start_host_scan_at")
        end = values.get("end_host_scan_at")
        if start and end:
            delta = end - start
            return cls._format_duration(delta)
        return None

    @staticmethod
    def _format_duration(delta: timedelta) -> str:
        seconds = delta.total_seconds()
        if seconds < 60:
            return f"{int(seconds)} с."
        elif seconds < 3600:
            return f"{int(seconds // 60)} м."
        elif seconds < 86400:
            return f"{int(seconds // 3600)} ч."
        else:
            return f"{int(seconds // 86400)} д."

    model_config = ConfigDict(from_attributes=True)


class VulnerabilityScanList(BaseModel):
    vulnerability_scans: List[VulnerabilityScan]
    total_cves: int
    critical_cves: int
    high_cves: int
    medium_cves: int
    low_cves: int
    unknown_cves: int

    total_pages: int
    current_page: int


class CVEBase(BaseModel):
    name: str
    severity: float
    title: str
    exploit: bool
    status: CVEStatusEnum = CVEStatusEnum.GOT
    description: str | None
    ip: str
    service: str | None
    port: int
    ai_answer: str | None


class CVECreate(CVEBase):
    pass


class CVEUpdatePartial(BaseModel):
    status: CVEStatusEnum | None = None


class CVE(CVEBase):
    id: int
    model_config = ConfigDict(from_attributes=True)


class CVEList(BaseModel):
    cves: List[CVE]

    total_pages: int
    current_page: int


class Protocol(str, Enum):
    UDP = "udp"
    TCP = "tcp"


class ExploitFromService(BaseModel):
    cvss: float
    url: Optional[str] = None


class CVEFromService(BaseModel):
    ip: str
    port: int
    protocol: Protocol
    cpe: str
    cve_identifier: str
    cvss: float
    title: str | None
    description: str | None
    exploits: List[ExploitFromService]
    service: str | None
