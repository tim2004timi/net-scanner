from typing import List

from sqlalchemy import DateTime, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship
from datetime import datetime

from ..assets.models import Asset
from ..database import Base


class VulnerabilityScan(Base):
    __tablename__ = "vulnerability_scans"

    asset_name: Mapped[str] = mapped_column()
    created_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow
    )
    start_host_scan_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    end_host_scan_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
    status: Mapped[str] = mapped_column()

    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    user: Mapped["User"] = relationship(back_populates="vulnerability_scans")

    asset_id: Mapped[int | None] = mapped_column(
        ForeignKey("assets.id", ondelete="SET NULL")
    )
    asset: Mapped[Asset | None] = relationship(back_populates="vulnerability_scans")

    cves: Mapped[List["CVE"]] = relationship(back_populates="vulnerability_scan")


class CVE(Base):
    __tablename__ = "cves"

    name: Mapped[str] = mapped_column()
    severity: Mapped[float] = mapped_column()
    title: Mapped[str] = mapped_column()
    exploit: Mapped[bool] = mapped_column()
    status: Mapped[str] = mapped_column()
    description: Mapped[str | None] = mapped_column(nullable=True)
    ip: Mapped[str] = mapped_column()
    service: Mapped[str | None] = mapped_column(nullable=True)
    port: Mapped[int] = mapped_column()
    ai_answer: Mapped[str | None] = mapped_column(nullable=True)

    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    user: Mapped["User"] = relationship(back_populates="cves")

    vulnerability_scan_id: Mapped[int] = mapped_column(
        ForeignKey("vulnerability_scans.id", ondelete="CASCADE")
    )
    vulnerability_scan: Mapped["VulnerabilityScan"] = relationship(
        back_populates="cves"
    )
